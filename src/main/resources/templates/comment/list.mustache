{{! Comments }}
<div class="card">
    <div class="card-header bi bi-chat-dots">{{#comments.size}}{{comments.size}}{{/comments.size}} Comments</div>
    <ul class="list-group-flush">
        {{#comments}}
            <li id="comment-{{id}}" class="list-group-item">
                <span>
                    <span style="font-size: small">{{user.nickname}}</span>
                    <span style="font-size: xx-small">{{createdData}}</span>&nbsp;
                </span>

                <form>
                    <input type="hidden" id="id" value="{{id}}">
                    <input type="hidden" id="postsId" value="{{board.number}}">
                    <input type="hidden" id="writerUserId" value="{{user.id}}">
                    <input type="hidden" id="sessionUserId" value="{{#user}}{{userId}}{{/user}}">
                    <div class="form-group">
                        <textarea class="form-control" id="comment-content" rows="3">{{comment}}</textarea>
                    </div>
                    {{#isWriter}}
                        <input type="button" id="btn-comment-update" value="수정" class="bi bi-pencil-square" style="color: black">
                        <button onclick="main.commentDelete({{board.number}}, {{id}}, {{user.id}}, {{userId}})" class="badge bi bi-trash" style="color: black">삭제</button>
                    {{/isWriter}}
                </form>

            </li>
        {{/comments}}
    </ul>
</div>
<script>
    const main = {
        init : function() {
            const _this = this;


            // 댓글 수정
            document.querySelectorAll('#btn-comment-update').forEach(function (item) {
                item.addEventListener('click', function () { // 버튼 클릭 이벤트 발생시
                    const form = this.closest('form'); // btn의 가장 가까운 조상의 Element(form)를 반환 (closest)
                    _this.commentUpdate(form); // 해당 form으로 업데이트 수행
                });
            });
        },


                /** 댓글 수정 */
    commentUpdate : function (form) {
        const data = {
            id: form.querySelector('#id').value,
            postsId: form.querySelector('#postsId').value,
            comment: form.querySelector('#comment-content').value,
            writerUserId :form.querySelector('#writerUSerId').value,
            sessionUserId : form.querySelector('#sessionUserId').value
        }
        if(data.writerUserId !== data.sessionUserId){
            alert("본인이 작성한 댓글만 수정 가능합니다.");
            return false;
        }
        if (!data.comment || data.comment.trim() === "") {
            alert("공백 또는 입력하지 않은 부분이 있습니다.");
            return false;
        }
        const con_check = confirm("수정하시겠습니까?");
        if (con_check === true) {
            $.ajax({
                type: 'PUT',
                url: '/board/content/' + data.postsId + '/comments/' + data.id,
                dataType: 'JSON',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(data)
            }).done(function () {
                window.location.reload();
            }).fail(function (error) {
                alert(JSON.stringify(error));
            });
        }
    },
    /** 댓글 삭제 */
        commentDelete : function (postsId, commentId, commentWriterId, sessionUserId) {
            if(commentWriterId !== sessionUserId){
                alert("본인이 작성한 댓글만 삭제 가능합니다.")
            }else{
                const con_check = confirm("삭제하시겠습니까?");
                if (con_check === true) {
                    $.ajax({
                        type: 'POST',
                        url: '/board/content/' + postsId + '/comments/' + commentId,
                        dataType: 'JSON',
                    }).done(function () {
                        alert('Comment was deleted!');
                        window.location.reload();
                    }).fail(function (error) {
                        alert(JSON.stringify(error));
                    });
                }
            }
        }
    };

    main.init();
</script>